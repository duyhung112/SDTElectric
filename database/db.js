require('dotenv').config();
const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');

// Debug connection config
console.log('üîß Config:', {
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  database: process.env.DB_NAME
});

const config = {
  host: process.env.DB_HOST,
  port: parseInt(process.env.DB_PORT),
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  connectTimeout: 10000
};

const pool = mysql.createPool(config);

// Th√™m b·∫£ng qu·∫£n l√Ω phi√™n b·∫£n
const DB_VERSION_TABLE = 'database_version';
const CURRENT_DB_VERSION = 1; // TƒÉng s·ªë n√†y khi c√≥ thay ƒë·ªïi schema

const checkAndUpdateDatabase = async () => {
  const conn = await pool.getConnection();
  try {
    // Ki·ªÉm tra xem b·∫£ng version ƒë√£ t·ªìn t·∫°i ch∆∞a
    const [tables] = await conn.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = ? AND table_name = ?
    `, [config.database, DB_VERSION_TABLE]);

    if (tables.length === 0) {
      // Ch∆∞a c√≥ b·∫£ng version -> database m·ªõi, ch·∫°y to√†n b·ªô init.sql
      await runInitScript(conn);
      await conn.query(`
        CREATE TABLE ${DB_VERSION_TABLE} (
          version INT NOT NULL DEFAULT 1,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `);
      await conn.query(`
        INSERT INTO ${DB_VERSION_TABLE} (version) VALUES (?)
      `, [CURRENT_DB_VERSION]);
      console.log('üÜï ƒê√£ kh·ªüi t·∫°o database m·ªõi');
    } else {
      // Ki·ªÉm tra phi√™n b·∫£n hi·ªán t·∫°i
      const [versionRows] = await conn.query(`
        SELECT version FROM ${DB_VERSION_TABLE} LIMIT 1
      `);
      const currentVersion = versionRows[0]?.version || 0;

      if (currentVersion < CURRENT_DB_VERSION) {
        // C·∫≠p nh·∫≠t schema t·ª´ng b∆∞·ªõc theo version
        await updateSchema(conn, currentVersion);
        await conn.query(`
          UPDATE ${DB_VERSION_TABLE} 
          SET version = ?, updated_at = CURRENT_TIMESTAMP
        `, [CURRENT_DB_VERSION]);
        console.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t database t·ª´ v${currentVersion} l√™n v${CURRENT_DB_VERSION}`);
      } else {
        console.log(`‚úÖ Database ƒë√£ ·ªü phi√™n b·∫£n m·ªõi nh·∫•t (v${CURRENT_DB_VERSION})`);
      }
    }
  } catch (err) {
    console.error('‚ùå L·ªói ki·ªÉm tra database:', err);
    throw err;
  } finally {
    conn.release();
  }
};

const runInitScript = async (conn) => {
  const initScript = fs.readFileSync(
    path.join(__dirname, 'init.sql'), 
    'utf-8'
  );
  
  try {
    for (const statement of initScript.split(';').filter(s => s.trim())) {
      await conn.query(statement);
    }
  } catch (err) {
    console.error('‚ùå L·ªói khi ch·∫°y init.sql:', err.message);
    throw err;
  }
};

const updateSchema = async (conn, currentVersion) => {
  // Th√™m c√°c c√¢u l·ªánh ALTER TABLE t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng version
  if (currentVersion < 1) {
    await runInitScript(conn); // Ch·∫°y to√†n b·ªô script n√¢ng c·∫•p
  }
  // C√≥ th·ªÉ th√™m c√°c ƒëi·ªÅu ki·ªán n√¢ng c·∫•p t·ª´ng ph·∫ßn ·ªü ƒë√¢y
};

// Test connection v√† ki·ªÉm tra database
const initialize = async () => {
  if (await testConnection()) {
    await checkAndUpdateDatabase();
  }
};

const testConnection = async () => {
  let conn;
  try {
    conn = await pool.getConnection();
    const [rows] = await conn.query('SELECT 1+1 AS result');
    console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng! K·∫øt qu·∫£:', rows[0].result);
    return true;
  } catch (err) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi:', err.message);
    return false;
  } finally {
    if (conn) conn.release();
  }
};

// T·ª± ƒë·ªông ch·∫°y khi import module
initialize().catch(err => {
  console.error('üö® Kh·ªüi t·∫°o database th·∫•t b·∫°i:', err);
  process.exit(1);
});

module.exports = { pool, testConnection };